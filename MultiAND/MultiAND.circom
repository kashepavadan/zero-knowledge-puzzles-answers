pragma circom 2.1.8;

// Create a circuit that takes an array of signals `in` and
// returns 1 if all of the signals are 1. If any of the
// signals are 0 return 0. If any of the signals are not
// 0 or 1 the circuit should not be satisfiable.

template MultiAND(n) {
    signal input in[n];
    signal output out;

    in[0] * (in[0] - 1) === 0;
    signal ands[n];
    ands[0] <== in[0];
    for (var i = 1; i < n; i++) {
        in[i] * (in[i] - 1) === 0;

        ands[i] <== ands[i - 1] * in[i];
    }

    out <== ands[n - 1];

}

component main = MultiAND(4);

/*
[INFO]  snarkJS: [ 218882428718392752222464057452572750885483644004160343436982041865758084956161 +main.in[0] ] * [ main.in[0] ] - [  ] = 0
[INFO]  snarkJS: [ 218882428718392752222464057452572750885483644004160343436982041865758084956161 +main.in[1] ] * [ main.in[1] ] - [  ] = 0
[INFO]  snarkJS: [ 21888242871839275222246405745257275088548364400416034343698204186575808495616main.in[0] ] * [ main.in[1] ] - [ 21888242871839275222246405745257275088548364400416034343698204186575808495616main.ands[1] ] = 0
[INFO]  snarkJS: [ 218882428718392752222464057452572750885483644004160343436982041865758084956161 +main.in[2] ] * [ main.in[2] ] - [  ] = 0
[INFO]  snarkJS: [ 21888242871839275222246405745257275088548364400416034343698204186575808495616main.ands[1] ] * [ main.in[2] ] - [ 21888242871839275222246405745257275088548364400416034343698204186575808495616main.ands[2] ] = 0
[INFO]  snarkJS: [ 218882428718392752222464057452572750885483644004160343436982041865758084956161 +main.in[3] ] * [ main.in[3] ] - [  ] = 0
[INFO]  snarkJS: [ 21888242871839275222246405745257275088548364400416034343698204186575808495616main.ands[2] ] * [ main.in[3] ] - [ 21888242871839275222246405745257275088548364400416034343698204186575808495616main.out ] = 0
*/
